generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id                  String                @id @default(cuid())
  name                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  code                String
  embassyInUsUrl      String?
  usEmbassyUrl        String?
  culture             String?
  demographics        String?
  diplomacy           String?
  economy             String?
  history             String?
  humanDevelopment    String?
  humanRights         String?
  media               String?
  militaryLeadership  String?
  overview            String?
  politicalLeadership String?
  politics            String?
  religion            String?
  published           Boolean               @default(false)
  diplomaticPresence  DiplomaticPresence[]
  embassyPresence     EmbassyPresence[]
  emergencyNumbers    EmergencyNumber[]
  feeds               Feed[]
  governmentMessaging GovernmentMessaging[]
  influencers         Influencer[]
  keywords            Keyword[]
  leadershipMessaging LeadershipMessaging[]
  newsSources         NewsSource[]
  reports             Report[]
  scrapperData        ScrapperData[]
  usMentionsKeywords   UsMentionsKeyword[]
}

model Feed {
  id        String   @id @default(cuid())
  name      String
  url       String
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)
  type      FeedType
  extraInfo String?
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
  @@index([order])
}

model User {
  id        String        @id @default(cuid())
  username  String        @unique
  password  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  role      UserRole      @default(USER)
  sessions  UserSession[]
}

model UserSession {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id        String   @id @default(cuid())
  name      String
  fileUrl   String
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  country   Country  @relation(fields: [countryId], references: [id])
}

model EmergencyNumber {
  id        String   @id @default(cuid())
  name      String
  number    String
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
}

model NewsSource {
  id        String   @id @default(cuid())
  name      String
  url       String
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     String?
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
}

model Influencer {
  id               String   @id @default(cuid())
  name             String
  url              String
  countryId        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  handle           String
  politicalLeaning Float
  role             String
  country          Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
}

model ContentGeneration {
  id          String   @id @default(cuid())
  status      String
  section     String
  countryName String
  content     String?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Keyword {
  id        String   @id @default(cuid())
  keyword   String
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
}

model GovernmentMessaging {
  id        String   @id @default(cuid())
  name      String
  handle    String
  notes     String?
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
}

model LeadershipMessaging {
  id               String   @id @default(cuid())
  name             String
  title            String
  handle           String
  politicalLeaning String?
  countryId        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  country          Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
}

model DiplomaticPresence {
  id        String   @id @default(cuid())
  handle    String
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
}

model EmbassyPresence {
  id        String   @id @default(cuid())
  handle    String
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
}

model UsMentionsSource {
  id        String   @id @default(cuid())
  name      String
  url       String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UsMentionsKeyword {
  id        String   @id @default(cuid())
  keyword   String
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
}

model ScrapperData {
  id            Int       @id @default(autoincrement())
  country_id    String
  url           String?
  feed_type     FeedType
  content       String?
  etag          String?    // <-- NEW
  last_modified String?    // <-- NEW
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)

  Country Country @relation(fields: [country_id], references: [id], onDelete: Cascade)

  @@unique([country_id, feed_type], map: "scrapperdata_countryid_url_unique")
}

model FeedLog {
  id         String   @id @default(cuid())
  feed_type  FeedType               // e.g. GOVERNMENT_MESSAGING, LEADERSHIP_MESSAGING
  url        String?              // API request URL
  response   String               // Full JSON response (or error message)
  status     String               // success, empty, rate_limited, error_429, error_403, etc.
  created_at DateTime @default(now())
}



enum FeedType {
  MAIN_FEED
  EMBASSY_MENTION
  AMBASSADOR_MENTION
  INFLUENCER_TALK
  DAILY_SUMMARY
  US_MENTIONS
  GOVERNMENT_MESSAGING
  LEADERSHIP_MESSAGING
  BREAKING_NEWS
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}
